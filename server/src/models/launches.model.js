const launchesDatabase = require("./launches.mongo");
const planets = require("./planets.mongo");

const launches = new Map(); //Map, key value pair

const DEFAULT_FLIGHT_NUMBER = 100;

// let latestFlightNumber = 100;

const launch = {
  flightNumber: 100,
  mission: "Kepler Exploration X",
  rocket: "Explorer IS1",
  launchDate: new Date("December 27, 2030"),
  target: "Kepler-442 b",
  customers: ["NASA", "Anson"],
  upcoming: true,
  success: true,
};

saveLaunch(launch);
// launches.set(launch.flightNumber, launch); //key value pair, can be any value (including functions)

function existsLaunchWithId(launchId) {
  //check if our launch has that ID
  return launches.has(launchId);
}

async function getLatestFlightNumber() {
  //not necessary to export, we only use it in our launches model
  //getting the latest/highest flight number
  const latestLaunch = await launchesDatabase
    .findOne({}) //takes one aka the highest
    .sort("-flightNumber"); //sorts in descending order - highest to lowest

  if (!latestLaunch) {
    // if there are no flights we need to set a default flight number (100)
    return DEFAULT_FLIGHT_NUMBER;
  }

  return latestLaunch.flightNumber;
}

async function getAllLaunches() {
  // The array from method changes the iterables of launches.values into an array that contains those values. json() can only take js object or an array (which is also valid json)
  return await launchesDatabase.find({}, { _id: 0, __v: 0 }); //the second parameter excludes. So we are excluding the Object ID generated by mongo and the version key generated by mongoose
  // return Array.from(launches.values()); // Our launches is a map (key:value pair). We want the values.
} //for (const value of launches.values()){ ... }

async function saveLaunch(launch) {
  //saves a launch assuming that all the properties of the launch are already set (particularly the flightnumber)
  //mongoose operations are async. This functions saves our launches to MongoDB
  const planet = await planets.findOne({
    //error handling
    kepler_name: launch.target,
  });

  if (!planet) {
    throw new Error("No matching planet was found"); //throwing error in a lower data access layer
  }

  await launchesDatabase.findOneAndUpdate(
    //Only returns the properties that we set in the update (aka launch) 
    {
      //only saves one launch at a time, therefore updateOne instead of updateMany
      flightNumber: launch.flightNumber, //if object with this flight number doesn't exist
    },
    launch, //if the object does exist, then update it with our launch object
    {
      upsert: true,
    }
  );
}

//Same as the function below but for our connected database
async function scheduleNewLaunch(launch) {
  //increments flight number by 1, and assigns a few properties by default - properties that we don't need to send through our API
  const newFlightNumber = (await getLatestFlightNumber()) + 1; // because theyre not things the frontend is concerned with. We can calculate it in the backend (e.g., success: true)

  const newLaunch = Object.assign(launch, {
    success: true,
    upcoming: true,
    customers: ["Anson, NASA"],
    flightNumber: newFlightNumber,
  });
  scheduleNewLaunch(launch);
  await saveLaunch(newLaunch);
}

// * When we stored the launches in memory:
// function addNewLaunch(launch) {
//     latestFlightNumber += 1; //setting the flight number on the server side, this makes it so that launch won't contain a flight number
//     launches.set( //Therefore we need to set the flight number on the launch object
//         latestFlightNumber, //key for our launch
//         Object.assign(launch, { //We still want to keep track of the flight number in our launch data so that it's returned from our api from getAllLaunches
//             success: true, //We need to add it to our launch object
//             upcoming: true, //The Object.assign takes the launch object and assigns some additional properties to it. If it already exists, it will overwrite it
//             customers: ['Anson, NASA'],
//             flightNumber: latestFlightNumber, //NOTE ** there are 8 values in the launch map, but we set 4 here to default values. This means the client needs to send us the other 4
//     })) //data that is determined on the server side
// }

function abortLaunchById(launchId) {
  //abort launch
  const aborted = launches.get(launchId);
  aborted.upcoming = false;
  aborted.success = false;
  return aborted;
}

module.exports = {
  existsLaunchWithId,
  getAllLaunches,
  scheduleNewLaunch,
  abortLaunchById,
};
